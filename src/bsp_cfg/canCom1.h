/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : canCom1.h
**     Project     : S32K_BSP
**     Processor   : S32K144_100
**     Component   : flexcan
**     Version     : Component SDK_S32K14x_07, Driver 01.00, CPU db: 3.00.000
**     Repository  : SDK_S32K14x_07
**     Compiler    : GNU C Compiler
**     Date/Time   : 2018-01-11, 13:43, # CodeGen: 25
**     Contents    :
**         FLEXCAN_DRV_SetBitrate           - void FLEXCAN_DRV_SetBitrate(uint8_t instance,const flexcan_time_segment_t *...
**         FLEXCAN_DRV_SetBitrateCbt        - void FLEXCAN_DRV_SetBitrateCbt(uint8_t instance,const flexcan_time_segment_t...
**         FLEXCAN_DRV_GetBitrate           - void FLEXCAN_DRV_GetBitrate(uint8_t instance,flexcan_time_segment_t * bitrate);
**         FLEXCAN_DRV_GetBitrateFD         - void FLEXCAN_DRV_GetBitrateFD(uint8_t instance,flexcan_time_segment_t *...
**         FLEXCAN_DRV_SetRxMaskType        - void FLEXCAN_DRV_SetRxMaskType(uint8_t instance,flexcan_rx_mask_type_t type);
**         FLEXCAN_DRV_SetRxFifoGlobalMask  - void FLEXCAN_DRV_SetRxFifoGlobalMask(uint8_t...
**         FLEXCAN_DRV_SetRxMbGlobalMask    - void FLEXCAN_DRV_SetRxMbGlobalMask(uint8_t instance,flexcan_msgbuff_id_type_t...
**         FLEXCAN_DRV_SetRxIndividualMask  - status_t FLEXCAN_DRV_SetRxIndividualMask(uint8_t...
**         FLEXCAN_DRV_Init                 - status_t FLEXCAN_DRV_Init(uint8_t instance,flexcan_state_t * state,const...
**         FLEXCAN_DRV_Deinit               - status_t FLEXCAN_DRV_Deinit(uint8_t instance);
**         FLEXCAN_DRV_ConfigTxMb           - status_t FLEXCAN_DRV_ConfigTxMb(uint8_t instance,uint8_t mb_idx,const...
**         FLEXCAN_DRV_SendBlocking         - status_t FLEXCAN_DRV_SendBlocking(uint8_t instance,uint8_t mb_idx,const...
**         FLEXCAN_DRV_Send                 - status_t FLEXCAN_DRV_Send(uint8_t instance,uint8_t mb_idx,const...
**         FLEXCAN_DRV_AbortTransfer        - status_t FLEXCAN_DRV_AbortTransfer(uint8_t instance,uint8_t mb_idx);
**         FLEXCAN_DRV_ConfigRxMb           - status_t FLEXCAN_DRV_ConfigRxMb(uint8_t instance,uint8_t mb_idx,const...
**         FLEXCAN_DRV_ConfigRxFifo         - void FLEXCAN_DRV_ConfigRxFifo(uint8_t i...
**         FLEXCAN_DRV_ReceiveBlocking      - status_t FLEXCAN_DRV_ReceiveBlocking(uint8_t instance,uint8_t...
**         FLEXCAN_DRV_Receive              - status_t FLEXCAN_DRV_Receive(uint8_t instance,uint8_t...
**         FLEXCAN_DRV_RxFifoBlocking       - status_t FLEXCAN_DRV_RxFifoBlocking(uint8_t instance,flexcan_msgbuff_t *...
**         FLEXCAN_DRV_RxFifo               - status_t FLEXCAN_DRV_RxFifo(uint8_t instance,flexcan_msgbuff_t * data);
**         FLEXCAN_DRV_GetTransferStatus    - status_t FLEXCAN_DRV_GetTransferStatus(uint8_t instance,uint8_t mb_idx);
**         FLEXCAN_DRV_InstallEventCallback - void FLEXCAN_DRV_InstallEventCallback(uint8_t instance,flexcan_callback_t...
**         FLEXCAN_DRV_GetDefaultConfig     - void FLEXCAN_DRV_GetDefaultConfig(flexcan_user_config_t * config);
**         FLEXCAN_DRV_SetTDCOffset         - void FLEXCAN_DRV_SetTDCOffset(uint8_t instance, bool enable, uint8_t offset);
**         FLEXCAN_DRV_GetTDCValue          - uint8_t FLEXCAN_DRV_GetTDCValue(uint8_t instance);
**         FLEXCAN_DRV_GetTDCFail           - bool FLEXCAN_DRV_GetTDCFail(uint8_t instance);
**         FLEXCAN_DRV_ClearTDCFail         - void FLEXCAN_DRV_ClearTDCFail(uint8_t instance);
**         FLEXCAN_DRV_SetRxMb14Mask        - void FLEXCAN_DRV_SetRxMb14Mask(uint8_t instance, flexcan_msgbuff_id_type_t...
**         FLEXCAN_DRV_SetRxMb15Mask        - void FLEXCAN_DRV_SetRxMb15Mask(uint8_t instance, flexcan_msgbuff_id_type_t...
**         FLEXCAN_DRV_ConfigPN             - void FLEXCAN_DRV_ConfigPN(uint8_t instance,bool enable,const...
**         FLEXCAN_DRV_GetWMB               - void FLEXCAN_DRV_GetWMB(uint8_t instance, uint8_t wmbIndex, flexcan_msgbuff_t...
**
**     Copyright 1997 - 2015 Freescale Semiconductor, Inc.
**     Copyright 2016-2017 NXP
**     All Rights Reserved.
**
**     THIS SOFTWARE IS PROVIDED BY NXP "AS IS" AND ANY EXPRESSED OR
**     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
**     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
**     IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
**     INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
**     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
**     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
**     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
**     IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
**     THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/
/*!
** @file canCom1.h
** @version 01.00
*/
/*!
**  @addtogroup canCom1_module canCom1 module documentation
**  @{
*/
#ifndef canCom1_H
#define canCom1_H
/* MODULE canCom1. */

/* Include inherited beans */
#include "clockMan1.h"
#include "Cpu.h"
#include "dmaController1.h"
#include "osif1.h"
#include "sfl_fifo.h"
#include "hal_can.h"

/*! @brief Number of CAN instances */
#if defined(CPU_S32K142)
#define NUMBER_OF_CAN_INSTANCES (2U)
#else
#define NUMBER_OF_CAN_INSTANCES (3U)
#endif


/*! @brief Device instance number */
#define INST_CANCOM1 (0U)
#define INST_CANCOM2 (1U)
#define INST_CANCOM3 (2U)

/*! @brief CAN FD configuration for Tx frames
 * Implements : struct_can_fd_tx_config
 */
typedef struct {
    bool fd_enable;                         /*!< Enable or disable FD*/
    uint8_t fd_padding;                     /*!< Set a value for padding. It will be used when the data length code (DLC)
                                                 specifies a bigger payload size than data_length to fill the MB */
    bool enable_brs;                        /*!< Enable bit rate switch inside a CAN FD format frame*/
} struct_can_fd_tx_config_t;

/*! @brief Driver and configuration structure
 * Implements : struct_can_config
 */
typedef struct
{
	uint8_t can_instance_number;							// Instance number
	flexcan_state_t * can_state_struct;						// Driver state structure which holds driver runtime data
	const flexcan_user_config_t * can_init_config_struct;	// Structure for initialization parameters
	struct_can_fd_tx_config_t *ptr_tx_mode;      			// CAN classical or FD mode for transmitting frames
}struct_can_config_t;

/*! @brief Declaration of the driver and configuration table structure */
extern struct_can_config_t struct_can_config_tbl[NUMBER_OF_CAN_INSTANCES];

/*! @brief Driver state structure which holds driver runtime data */
extern flexcan_state_t can_state[NUMBER_OF_CAN_INSTANCES];

/*! @brief Declaration of the config structure  */
extern const flexcan_user_config_t can_fd_InitConfig;
extern const flexcan_user_config_t can_hs_InitConfig;

extern struct_can_fd_tx_config_t can_hs_tx_config;
extern struct_can_fd_tx_config_t can_fd_tx_config;

#endif

